apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$rootDir/config.gradle"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion appConfig.compileSdkVersion
    defaultConfig {
        applicationId "com.cryptape.cita_wallet"
        targetSdkVersion appConfig.targetSdkVersion
        minSdkVersion appConfig.minSdkVersion
        versionCode appConfig.versionCode
        versionName getVersionName(appConfig.isDebug)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [InstallChannelValue: "cryptape"]
    }

    signingConfigs {
        release {
            storeFile file('../keystore.jks')
            storePassword appConfig.signStorePassword
            keyAlias appConfig.signKeyAlias
            keyPassword appConfig.signKeyPassword
        }
        debug {
            storeFile file('../keystore.jks')
            storePassword appConfig.signStorePassword
            keyAlias appConfig.signKeyAlias
            keyPassword appConfig.signKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "true"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "false"

        }
    }

    applicationVariants.all { variant ->
        if (!variant.name.contains("dev")) {
            variant.outputs.all { output ->
                def lintTask = tasks["lint${variant.name.capitalize()}"]
                output.assemble.dependsOn lintTask

                if (variant.buildType.name == 'release') {
                    def apkName = "neuron_v${getVersionName(false)}_${variant.productFlavors[0].name}.apk"
                    outputFileName = new File(apkName)
                } else {
                    def apkName = "neuron_v${getVersionName(true)}.apk"
                    outputFileName = new File(apkName)
                }
            }
        }
    }

    android {
        lintOptions {
            abortOnError false
            lintConfig file('lint.xml')
            disable 'TypographyFractions', 'TypographyQuotes'
            enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
            check 'NewApi', 'InlinedApi'
            quiet true
            abortOnError false
            ignoreWarnings true
        }

        dexOptions {
            preDexLibraries true
            maxProcessCount 8
            javaMaxHeapSize "3072m"
            // Instead of setting the heap size for the DEX process, increase Gradle's
            // heap size to enable dex-in-process. To learm more, read the next section.
            // javaMaxHeapSize "2048m"
        }
    }

    // 渠道配置
    flavorDimensions "default"
    productFlavors {
//        yingyongbao { dimension "default" }
//        _360 { dimension "default" }
//        oppo { dimension "default" }
//        baidu { dimension "default" }
//        huawei { dimension "default" }
//        xiaomi { dimension "default" }
//        vivo { dimension "default" }
//        wandoujia { dimension "default" }
        cryptape { dimension "default" }
        dev {
            resConfigs appConfig.devResConfigsEn, appConfig.devResConfigsDraw
        }
    }

    productFlavors.all { flavor ->
        if (!name.equals("dev")) {
            flavor.manifestPlaceholders = [InstallChannelValue: name]
            flavor.multiDexEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions{
        jvmTarget = '1.8'
    }

    buildToolsVersion '28.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'io.reactivex:rxandroid:1.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
    implementation 'org.abstractj.kalium:kalium:0.7.0'
    implementation 'com.google.protobuf:protobuf-java:3.5.1'
    implementation 'cn.yipianfengye.android:zxing-library:2.2'
    implementation 'com.google.guava:guava:24.1-android'
    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.snappydb:snappydb-lib:0.5.2'
    implementation 'com.esotericsoftware.kryo:kryo:2.24.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.alibaba:fastjson:1.1.70.android'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'org.web3j:core:3.3.1-android'
    implementation 'com.yanzhenjie:permission:2.0.0-rc5'
    implementation 'io.reactivex:rxjava:1.2.4'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation files('libs/infura-3.3.1-android.jar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation files('libs/abi-0.20.jar')
    implementation files('libs/core-0.20.jar')
    implementation files('libs/crypto-0.20.jar')
    implementation files('libs/protobuf-0.20.jar')
    implementation files('libs/utils-0.20.jar')
}
repositories {
    mavenCentral()
}

def getVersionName(boolean isDebug) {
    String version = appConfig.versionMajor +
            '.' + appConfig.versionMinor +
            '.' + appConfig.versionBeta
    String today = new Date().format('yyMMdd')
    String time = new Date().format('HHmmss')
    if (isDebug) {
        return version + ".$today.$time"
    }
    return version + ".$today"
}
